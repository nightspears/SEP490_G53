@model CustomerProfileModel
@{
	var customerId = ViewData["CustomerId"] as string; // Cast to string, or use null if it's not a string
	var customerEmail = ViewData["CustomerEmail"] as string;  // Cast to string
	var customerPhone = ViewData["CustomerPhone"] as string;  // Cast to string
	Layout = "_layoutCommon";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<link href="~/home_assets/css/sanpham.css" rel="stylesheet" />
<style>
	.card-body {
		max-height: 384px; /* Adjust height as needed */
		overflow-y: auto;
		padding: 15px;
		font-family: Arial, sans-serif;
	}
/* Address Entries */
.address-entry {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    margin: 0 10px 20px 10px; /* Combined margin for spacing and indentation */
    background-color: #f9f9f9;
    position: relative;
}

.address-entry p {
    margin: 5px 0;
    font-size: 14px;
    color: #555;
}

.address-entry strong {
    color: #333;
    font-weight: 600;
}

.default-address {
    color: #28a745;
    font-weight: bold;
    font-size: 0.85em;
    margin-left: 5px;
}

.edit-link, .delete-link {
    color: #007bff;
    font-size: 14px;
    text-decoration: none;
    margin-right: 10px;
}

.edit-link:hover, .delete-link:hover {
    color: #0056b3;
    text-decoration: underline;
}

/* Button Styles */
.btn-primary {
    background-color: #1E2A78;
    color: #fff;
    border: none;
    padding: 10px 20px;
    font-size: 16px;
    border-radius: 4px;
    margin-bottom: 20px;
}

.btn-primary:hover {
    background-color: #16215b;
}

/* Modal Styles */
.modal {
    display: none; /* Hidden by default */
    position: fixed;
   
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto; /* Enable scrolling */
    background-color: rgba(0, 0, 0, 0.4); /* Semi-transparent background */
}

.modal-content {
    background-color: white;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 900px;
}

.modal-body {
    max-height: 400px;
    overflow-y: auto;
    padding-right: 10px;
}

.close, .modal-close {
    color: #aaa;
    font-size: 28px;
    font-weight: bold;
    position: absolute;
    top: 10px;
    right: 25px;
    background: none;
    border: none;
    cursor: pointer;
}

.close:hover, .close:focus, .modal-close:hover {
    color: #e86565;
}

/* Modal Header & Footer */
.modal-header {
    font-size: 24px;
    font-weight: bold;
    color: #333;
    margin-bottom: 15px;
}

.modal-footer {
    text-align: right;
    margin-top: 20px;
}

/* Responsive Modal Styling */
@@media (max-width: 768px) {
    .modal-content {
        padding: 15px;
    }

    .modal-header {
        font-size: 20px;
    }

    .modal-body {
        font-size: 14px;
    }

    .modal-close {
        font-size: 20px;
    }
}

/* Category List */
.category ul li {
    height: 50px;
    line-height: 50px;
    cursor: pointer;
}

.category ul li:hover, .category ul li.active {
    background-color: #e86565;
    border-radius: 10px;
}

.category ul li a {
    font-size: 19px;
    color: black;
    margin-left: 10px;
    text-decoration: none;
}

.category ul li:hover a, .category ul li.active a {
    color: white;
}

/* Layout and Container */
.container {
    padding: 50px 0;
}

.card {
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

.heading {
    font-size: 24px;
    font-weight: bold;
}

/* Order Summary and Details */
.order-summary, .customer-info, .shipping-address, .product-list, .payment-info {
    margin-bottom: 20px;
}

.order-summary p, .customer-info p, .shipping-address p, .payment-info p {
    font-size: 14px;
    color: #555;
}

.order-summary h5, .customer-info h6, .shipping-address h6, .product-list h6, .payment-info h6 {
    font-size: 16px;
    font-weight: bold;
    color: #333;
}

/* Product Item */
.product-item {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
}

.product-item img {
    border-radius: 5px;
}

.product-item span {
    font-size: 14px;
    color: #555;
}

.payment-info p {
    font-size: 14px;
    color: #333;
}

.payment-info strong {
    color: #000;
}

</style>

<div class="innerbannerwrap">
	<div class="content"></div>
	<div class="innerbanner">
		<h2 class="bannerHeadline" style="font-size:65px">Trang <span>khách hàng</span></h2>
	</div>
</div>

<div style="padding-top: 30px;">
	<h2 style="padding-bottom: 20px" class="heading small">Trang tài khoản <span>Viettel Shop</span></h2>
</div>

<div class="container my-5 mt-5">
	<div class="d-flex">
		<!-- Left Column: Sidebar Menu -->
		<div class="col-md-3">
			<div class="filter-section">
				<div class="mb-3">
					<div class="category">
						<ul id="lstCate">
							<li onclick="showSection(event, 'accountInfo')" class="active"><a href="javascript:void(0)">Thông tin tài khoản</a></li>
							<li onclick="showSection(event, 'orders')"><a href="javascript:void(0)">Đơn hàng của bạn</a></li>
							<li onclick="showSection(event, 'changePassword')"><a href="javascript:void(0)">Đổi mật khẩu</a></li>
							<li onclick="showSection(event, 'addressBook')"><a href="javascript:void(0)">Sổ địa chỉ</a></li>

					</div>
				</div>
			</div>
		</div>

		<!-- Right Column: Account Details -->
		<div class="col-md-9">
			<div id="accountInfo" class="card section">
				<div class="card-body">
					<h4>Thông tin tài khoản</h4>
					<div class="form-row">
						<div class="form-group col-md-6">
							<label>Họ tên</label>
							<p id="fullName"></p>
						</div>
						<div class="form-group col-md-6">
							<label>Email</label>
							<p id="email"></p>
						</div>
						<div class="form-group col-md-6">
							<label>Phone</label>
							<p id="phone"></p>
						</div>
					</div>
				</div>
			</div>

			<div id="orders" class="card section" style="display:none;">
				<div class="card-body">
					<h4>Đơn hàng của bạn</h4>
					<table class="table table-striped">
						<thead>
							<tr>
								<th scope="col">Mã đơn hàng</th>
								<th scope="col">Ngày đặt</th>
								<th scope="col">Tổng tiền</th>
								<th scope="col">Trạng thái</th>
							</tr>
						</thead>
						<tbody id="ordersTableBody">
							<!-- Orders data will be populated here -->
						</tbody>
					</table>
				</div>
			</div>
			<!-- Modal or Section to display Order details -->
			<!-- Modal for displaying order details -->
			<div id="orderDetailModal" class="modal">
				<div class="modal-content">
					<span class="close">&times;</span>
					<h4>Order Details</h4>
					<div class="modal-body">
						<!-- Order details will be injected here dynamically -->
					</div>
				</div>
			</div>
			<div id="changePassword" class="card section" style="display:none;">
				<div class="card-body">
					<h4>Đổi mật khẩu</h4>
					<!-- Change password form goes here -->
					<p>Chức năng đổi mật khẩu sẽ hiển thị ở đây.</p>
				</div>
			</div>

			<div id="addressBook" class="card section">
				<div class="card-body">
					<h4>ĐỊA CHỈ CỦA BẠN</h4>
					<button class="btn btn-primary" onclick="addNewAddress()">THÊM ĐỊA CHỈ</button>

					<div id="addressEntries">
						<!-- Dynamic address entries will be inserted here -->
					</div>
				</div>
			</div>

			<!-- Modal for Adding New Address -->
			<div class="modal fade" id="addressModal" tabindex="-1" role="dialog" aria-labelledby="addressModalLabel" aria-hidden="true">
				<div class="modal-dialog" role="document">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title" id="addressModalLabel">Thêm Địa Chỉ Mới</h5>
							<button type="button" class="close" data-dismiss="modal" aria-label="Close">
								<span aria-hidden="true">&times;</span>
							</button>
						</div>
						<div class="modal-body">
							<div class="form-group">
								<label for="addressDetail">Chi Tiết Địa Chỉ</label>
								<input type="text" class="form-control" id="addressDetail" placeholder="Nhập địa chỉ">
							</div>
							<div class="form-group">
								<label for="citySelect">Thành Phố</label>
								<select class="form-control" id="citySelect">
									<option value="">Chọn Thành Phố</option>
									<!-- Options will be dynamically populated -->
								</select>
							</div>
							<div class="form-group">
								<label for="districtSelect">Quận/Huyện</label>
								<select class="form-control" id="districtSelect">
									<option value="">Chọn Quận/Huyện</option>
									<!-- Options will be dynamically populated -->
								</select>
							</div>
							<div class="form-group">
								<label for="wardSelect">Phường/Xã</label>
								<select class="form-control" id="wardSelect">
									<option value="">Chọn Phường/Xã</option>
									<!-- Options will be dynamically populated -->
								</select>
							</div>
						</div>
						<div class="modal-footer">
							<button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
							<button type="button" class="btn btn-primary" onclick="saveAddress()">Lưu Địa Chỉ</button>
						</div>
					</div>
				</div>
			</div>

		</div>
	</div>
</div>

<script>
	// Function to show and hide sections
	function showSection(event, sectionId) {
		document.querySelectorAll('.section').forEach(section => section.style.display = 'none');
		document.querySelectorAll('#lstCate li').forEach(item => item.classList.remove('active'));

		document.getElementById(sectionId).style.display = 'block';
		event.target.closest('li').classList.add('active');
	}

	// Fetch customer information and order data
	const customerId = '@ViewData["CustomerId"]';
	const apiBase = 'https://localhost:5000/api';

	async function fetchData() {
		try {
			const customerRes = await fetch(`${apiBase}/customer/getCustomerAccountById/${customerId}`);
			const customerData = await customerRes.json();
			if (customerData) {
				document.querySelector("#accountInfo #fullName").innerHTML = `Họ tên: ${customerData.fullName}`;
				document.querySelector("#accountInfo #email").innerHTML = `Email: ${customerData.email}`;
				document.querySelector("#accountInfo #phone").innerHTML = `Phone: ${customerData.phone}`;
			} else {
				throw new Error("Customer account not found.");
			}

			 // Fetch orders
		const ordersRes = await fetch(`${apiBase}/Order/getordersbyaccount/${customerId}`);
		if (!ordersRes.ok) {
			throw new Error("Failed to fetch orders.");
		}

		const orders = await ordersRes.json();
		const ordersTableBody = document.getElementById('ordersTableBody');
		if (orders && orders.length > 0) {
			ordersTableBody.innerHTML = orders.map(order => createOrderRow(order)).join('');
		} else {
			ordersTableBody.innerHTML = '<tr><td colspan="4">Chưa có đơn hàng nào.</td></tr>';
		}
	} catch (error) {
		console.error("Error fetching data: ", error);
		if (error.message !== "Failed to fetch orders.") {
			alert("Lỗi khi tải thông tin.");
		}
	}
}

	function createOrderRow(order) {
		const formattedPrice = new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(order.totalPrice);
		const statusText = order.status ? 'Đã gửi vận chuyển' : 'Chưa gửi vận chuyển';
		const statusColor = order.status ? 'green' : 'red';

		return `
			<tr>
				<td><a href="#" class="order-id" data-order-id="${order.id}">${order.id}</a></td>
				<td>${new Date(order.orderDate).toLocaleDateString()}</td>
				<td>${formattedPrice}</td>
				<td style="color: ${statusColor};">${statusText}</td>
			</tr>
		`;
	}

	async function fetchOrderDetails(orderId) {
		try {
			const response = await fetch(`${apiBase}/Order/getorderdetails/${orderId}`);
			const orderDetail = await response.json();
			displayOrderDetails(orderDetail);
		} catch (error) {
			console.error("Error fetching order details:", error);
			alert("Lỗi khi tải chi tiết đơn hàng.");
		}
	}

	function displayOrderDetails(orderDetail) {
		const modal = document.getElementById('orderDetailModal');
		const modalBody = modal.querySelector('.modal-body');
		const formattedPrice = new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(orderDetail.totalPrice);

		modalBody.innerHTML = `
			<h5><strong>Mã đơn hàng:</strong> ${orderDetail.id}</h5>
			<p><strong>Ngày đặt:</strong> ${new Date(orderDetail.orderDate).toLocaleDateString()}</p>
			<p><strong>Tổng tiền:</strong> ${formattedPrice}</p>
			<p><strong>Phí vận chuyển:</strong> ${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(orderDetail.shipmentFee)}</p>
			<p><strong>Trạng thái:</strong> ${orderDetail.status ? 'Đã xử lý' : 'Chưa xử lý'}</p>
			<p><strong>Ghi chú:</strong> ${orderDetail.note || 'Không có ghi chú.'}</p>

			<h6><strong>Thông tin khách hàng:</strong></h6>
			<p><strong>Email:</strong> ${orderDetail.customerEmail}</p>
			<p><strong>Điện thoại:</strong> ${orderDetail.customerPhone}</p>
			<p><strong>Họ tên:</strong> ${orderDetail.customerFullName}</p>
			<p><strong>Địa chỉ giao hàng:</strong>${orderDetail.address.detailedAddress}, ${orderDetail.address.wardName}, ${orderDetail.address.districtName}, ${orderDetail.address.cityName}</p>

			<h6><strong>Thông tin sản phẩm:</strong></h6>
			<table class="table table-bordered">
				<thead>
					<tr>
						<th>Hình ảnh</th>
						<th>Tên sản phẩm</th>
						<th>Số lượng</th>
						<th>Size</th>
						<th>Giá</th>
						<th>Thành tiền</th>
					
					</tr>
				</thead>
				<tbody>
					${orderDetail.products.map(product => `
						<tr>
							<td><img src="${product.product.avatar}" alt="${product.product.productName}" style="width: 50px; height: 50px; object-fit: cover;" /></td>
									<td>
		${product.product.productName || ''}
		${product.player && product.player.fullName ? `<br>Tên cầu thủ: ${product.player.fullName}` : ''}
		${product.player && product.player.shirtNumber ? `<br>Số áo cầu thủ: ${product.player.shirtNumber}` : ''}
		${product.customShirtNumber ? `<br>Số áo custom: ${product.customShirtNumber}` : ''}
		${product.customShirtName ? `<br>Tên áo custom: ${product.customShirtName}` : ''}
	</td>
							<td>${product.quantity}</td>
							<td>${product.size}</td>
							<td>${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(product.price)}</td>
							<td>${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(product.price * product.quantity)}</td>
							
						</tr>
					`).join('')}
				</tbody>
			</table>
		`;
		modal.style.display = 'block';
	}

	window.onload = () => {
		// Hide all sections and show the account info section by default
		document.querySelectorAll('.section').forEach(section => section.style.display = 'none');
		document.getElementById('accountInfo').style.display = 'block';

		// Set the first item in the category list as active
		document.querySelector('#lstCate li').classList.add('active');
		fetchData();
		fetchAddress();
	};

	// Close modal functionality
	document.querySelector('.close').onclick = () => document.getElementById('orderDetailModal').style.display = 'none';
	window.onclick = event => {
		if (event.target === document.getElementById('orderDetailModal')) {
			document.getElementById('orderDetailModal').style.display = 'none';
		}
	};

	// Event listener for order IDs
	document.addEventListener('click', (e) => {
		if (e.target.classList.contains('order-id')) {
			e.preventDefault();
			const orderId = e.target.dataset.orderId;
			fetchOrderDetails(orderId);
		}
	});

async function fetchAddress() {
	try {
		const addressRes = await fetch(`${apiBase}/Customer/address/${customerId}`);
		const addressData = await addressRes.json();

		const addressContainer = document.getElementById('addressEntries');
		addressContainer.innerHTML = ''; // Clear existing content

		if (addressData && addressData.length > 0) {
			// Loop through the address data and display each address
			addressData.forEach(address => {
				addressContainer.innerHTML += `
					<div class="address-entry">
						<p><strong>Địa chỉ:</strong> ${address.detailedAddress}</p>
						<p><strong>Phường/Xã:</strong> ${address.wardName}</p>
						<p><strong>Quận/Huyện:</strong> ${address.districtName}</p>
						<p><strong>Tỉnh/Thành phố:</strong> ${address.cityName}</p>
						<button class="btn btn-danger" onclick="deleteAddress(${address.addressId})">Xóa</button>
					</div>
				`;
			});
		} else {
			// No addresses found, display a friendly message
			addressContainer.innerHTML = '<p>Chưa có địa chỉ nào được lưu.</p>';
		}
	} catch (error) {
		console.error("Error fetching address:", error);
		alert("Lỗi khi tải địa chỉ.");
	}
}

async function deleteAddress(addressId) {
	try {
		const response = await fetch(`${apiBase}/Customer/DeletePersonalAddress/${addressId}`, {
			method: 'DELETE'
		});

		if (response.ok) {
			alert("Địa chỉ đã được xóa thành công.");
			await fetchAddress(); // Refresh the address list
		} else {
			const errorData = await response.json();
			alert(`Lỗi khi xóa địa chỉ: ${errorData.message || 'Unknown error'}`);
		}
	} catch (error) {
		console.error("Error deleting address:", error);
		alert("Lỗi khi xóa địa chỉ.");
	}
}

	const token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImRlYmI4YjNlYTc3OTYzY2JhZWNiNmY5M2ZjOWQ5M2QwZjRhNzRmOTBjZTgyMDc2MjlmM2Q5ODcxY2M2MDYyMWU5N2EzZjgxNjMzNTVhOGMyIn0.eyJhdWQiOiIxMTYiLCJqdGkiOiJkZWJiOGIzZWE3Nzk2M2NiYWVjYjZmOTNmYzlkOTNkMGY0YTc0ZjkwY2U4MjA3NjI5ZjNkOTg3MWNjNjA2MjFlOTdhM2Y4MTYzMzU1YThjMiIsImlhdCI6MTcyNjc5ODk3MCwibmJmIjoxNzI2Nzk4OTcwLCJleHAiOjE3NTgzMzQ5NzAsInN1YiI6IjMzMTYiLCJzY29wZXMiOltdfQ.Rd_OwL2rf4B7VmpSYa4ryaEqL5K2QQCZ24pN-rWclHZ_Ltx7ItWtUrEz8SIXGODTe3vfDrO80KvsMkvRLlB0-e8h96jMoAMsDz8z5qpbekfQTaneFDdMbQPWLPWzYtbzhQv44p6oWDLI9g0gPNIwfLXMYqZvPwTXPh9PdJrY4zqiQKWbZnfZIgbR1ovPifqMmZwiszQd8y-wVgCxqvb8I4zWJkfCw-Qva081kOgx0wphAEbfngInpzs8EngFZg0tMyH-mKBL1d1Zx20DhqQbrzGBTRUkZjCur_x2jgwdUtwu36O3ESuHfCxI-I-qCAIbHssbKSCe1gtZS5UcK5M5-H60rsRfSBTEnU3hqW1RM1CBt2cGu0pzc3RGtOzwBXzhyJaORI6PI9oDrb2Z_S7riZO9xXiedz-EUNh1oO27--ltBksJs2wBuDUvUhNRi-bewXAxCo_gYbY0Dvc8urSrij6h7bo8wNcu2KjelCrbA16Mo_n-Lz6gL6IfYV3M072YSnGTTejZ0d3nodekXR6SKun_cx85Dvf7US5TMIC5Pfndm0b0Q9ly0fnEVD_8WN9_9tjZMrC98nrS1Hm-4oxHrWzAuW3OeotJlgze9h42exNxOjt438J4zUvJd6fRCXbog4ewVPiqQRvhRpaBBnqBrx_7FyjtOAOOVNA3rQq2jhw';  // Replace this with your actual token or get it dynamically

	const headers = {
		'Authorization': `Bearer ${token}`,
		// Add any other necessary headers here
	};

	// Function to show the modal
	function addNewAddress() {
		$('#addressModal').modal('show');
		populateCities(); // Populate cities dynamically
	}

	// Function to fetch and populate cities dropdown
	async function populateCities() {
		const citySelect = document.getElementById('citySelect');
		citySelect.innerHTML = '<option value="">Chọn Thành Phố</option>'; // Clear previous options

		try {
			const response = await fetch('https://sandbox.goship.io/api/v2/cities', {
				method: 'GET', headers: headers,

			});

			if (response.ok) {
				const citiesData = await response.json();
				console.log('Cities Data:', citiesData);  // Log the response to check its structure

				// Check if the 'data' field exists and is an array
				if (Array.isArray(citiesData.data)) {
					citiesData.data.forEach(city => {
						const option = document.createElement('option');
						option.value = city.id; // Assuming the API returns a "code" field for cities
						option.textContent = city.name;
						citySelect.appendChild(option);
					});
				} else {
					console.error('Cities data is not an array:', citiesData.data);
				}
			} else {
				console.error('Failed to fetch cities:', response.statusText);
			}
		} catch (error) {
			console.error('Error fetching cities:', error);
		}
	}

	document.getElementById('citySelect').addEventListener('change', function () {
		const selectedCityCode = this.value;
		console.log(`Selected City Code: ${selectedCityCode}`); // Check the city code
		populateDistricts(selectedCityCode);  // Fetch districts when a city is selected
	});

	async function populateDistricts(cityCode) {
		const districtSelect = document.getElementById('districtSelect');
		districtSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>'; // Clear previous options

		try {
			console.log(`Fetching districts for city_code: ${cityCode}`);

			const response = await fetch(`https://sandbox.goship.io/api/v2/cities/${cityCode}/districts`, {
				method: 'GET',
				headers: headers,
			});
			if (response.ok) {
				const districtData = await response.json();
				console.log('District Data:', districtData);  // Log the response to check its structure

				// Check if the 'data' field exists and is an array
				if (Array.isArray(districtData.data)) {
					// Clear previous options if any
					districtSelect.innerHTML = '<option value="">Chọn Quận/Huyện</option>';

					// Populate the district select with new data
					districtData.data.forEach(district => {
						const option = document.createElement('option');
						option.value = district.id; // Assuming the API returns a "code" field for cities
						option.textContent = district.name;
						districtSelect.appendChild(option);
					});
				} else {
					console.error('district data is not an array:', districtData.data);
				}
			} else {
				console.error('Failed to fetch district:', response.statusText);
			}
		} catch (error) {
			console.error('Error fetching district:', error);
		}
	}


	// Event handler for district selection
	document.getElementById('districtSelect').addEventListener('change', function () {
		const selectedCityCode = document.getElementById('citySelect').value;
		const selectedDistrictCode = this.value;
		if (selectedCityCode && selectedDistrictCode) {
			populateWards(selectedCityCode, selectedDistrictCode);  // Fetch wards if both city and district are selected
		}
	});

	// Fetch and populate wards based on selected district
	async function populateWards(cityCode, districtCode) {
		const wardSelect = document.getElementById('wardSelect');
		wardSelect.innerHTML = '<option value="">Chọn Phường/Xã</option>'; // Clear previous options

		try {
			const response = await fetch(`https://sandbox.goship.io/api/v2/districts/${districtCode}/wards`, { method: 'GET', headers: headers, });

			if (response.ok) {
				const wardData = await response.json();
				console.log('Ward Data:', wardData);  // Log the response to check its structure

				// Check if the 'data' field exists and is an array
				if (Array.isArray(wardData.data)) {
					wardData.data.forEach(ward => {
						const option = document.createElement('option');
						option.value = ward.id; // Assuming the API returns a "code" field for cities
						option.textContent = ward.name;
						wardSelect.appendChild(option);
					});
				} else {
					console.error('ward data is not an array:', wardData.data);
				}
			} else {
				console.error('Failed to fetch ward:', response.statusText);
			}
		} catch (error) {
			console.error('Error fetching ward:', error);
		}
	}
	// Function to save the new address
	async function saveAddress() {
		// Get form field values
		const addressDetail = document.getElementById('addressDetail').value;
		const cityId = document.getElementById('citySelect').value;
		const districtId = document.getElementById('districtSelect').value;
		const wardId = document.getElementById('wardSelect').value;

		// Ensure that all fields are selected
		if (!addressDetail || !cityId || !districtId || !wardId) {
			alert('Vui lòng điền đầy đủ thông tin!');
			return;
		}

		// Create the DTO object
		const personalAddressDto = {
			CustomerId: customerId, // Replace with the actual customer ID if needed
			DetailedAddress: addressDetail,
			CityName: document.getElementById('citySelect').selectedOptions[0].text,
			City: cityId,
			DistrictName: document.getElementById('districtSelect').selectedOptions[0].text,
			District: districtId,
			WardName: document.getElementById('wardSelect').selectedOptions[0].text,
			Ward: wardId,
			Status: 1 // Replace with appropriate status if needed
		};

		try {
			// Make POST request to add the new address
			const response = await fetch('https://localhost:5000/api/Customer/add-address', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify(personalAddressDto),
			});

			// Handle the response
			if (response.ok) {
				const contentType = response.headers.get("Content-Type");
				if (contentType && contentType.includes("application/json")) {
					const result = await response.json();
					alert('Địa chỉ đã được thêm thành công!');
					$('#addressModal').modal('hide'); // Close modal after success
				} else {
					// If response is plain text (not JSON)
					const result = await response.text();
					alert(`Thêm địa chỉ thành công: ${result}`);
					$('#addressModal').modal('hide');
					fetchAddress();
				}
			} else {
				const error = await response.text();
				alert(`Thêm địa chỉ thất bại: ${error}`);
			}
		} catch (error) {
			console.error('Error saving address:', error);
			alert('Đã có lỗi xảy ra. Vui lòng thử lại.');
		}
	}

</script>
