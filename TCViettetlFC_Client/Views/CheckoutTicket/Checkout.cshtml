@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    var customerId = ViewData["CustomerId"];
    Layout = "_LayoutCommonTicket";

}

<style>
    .adjust-quantity {
        width: 20px;
        height: 20px;
        font-size: 12px;
        padding: 2px;
        border-radius: 50%;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        cursor: pointer;
    }

        .adjust-quantity:hover {
            background-color: #e0e0e0;
        }
    .popup {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
    }

    .popup-content {
        background-color: #28a745;
        padding: 40px;
        border-radius: 10px;
        text-align: center;
        color: white;
        font-size: 1.5em;
    }

        .popup-content i {
            font-size: 3em;
            color: white;
        }

    .body {
        background-color: #e5e4e4;
    }

    .checkout-body {
        padding-top: 40px;
        margin-left: 8.5rem !important;
        margin-right: 8.5rem !important;
        padding-bottom: 40px;
    }

    .table-borderless {
        border-radius: 10px;
    }

    .info-customer {
        padding: 20px;
        border-radius: 10px;
    }

    .don-hang {
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #f8f9fa;
    }

    .don-hang-header h4 {
        font-weight: bold;
        font-size: medium;
        color: #333;
        margin-bottom: 15px;
    }

    .don-hang-body {
        border-top: 1px solid #ddd;
        margin-top: 10px;
        padding-top: 10px;
    }

    .body-content {
        padding: 5px 0;
    }

    .don-hang-footer {
        border-top: 1px solid #ddd;
        margin-top: 10px;
        padding-top: 10px;
    }

        .don-hang-footer p {
            font-weight: bold;
        }

    .total-amount {
        color: red;
        font-weight: bold;
    }

    .vat-note {
        font-size: 0.95em;
        color: #888;
        text-align: center;
        margin-top: 5px;
    }

    .purchase-button {
        background-color: #2c3e9d;
        color: white;
        font-weight: bold;
        padding: 10px;
        width: 100%;
        border: none;
        border-radius: 8px;
        cursor: pointer;
    }

        .purchase-button:hover {
            background-color: #1c2d7d;
        }

    .order-note {
        text-align: center;
        font-size: medium;
        color: #888;
        margin-top: 10px;
    }

    .timer-container {
        border: 2px dashed #ff6666;
        padding: 10px;
        margin-top: 10px;
        border-radius: 8px;
        text-align: center;
        font-weight: bold;
    }

        .timer-container span {
            font-size: medium;
        }

    .timer {
        display: inline-block;
        background-color: #ff4d4d;
        color: white;
        padding: 5px 10px;
        margin: 0 5px;
        border-radius: 5px;
        font-size: medium;
    }

    .payment-method {
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
    }

        .payment-method h4 {
            font-weight: bold;
            font-size: medium;
            color: #333;
        }

        .payment-method .custom-control-label {
            font-size: medium;
        }

    .form-group {
        font-size: medium;
    }

        .form-group input {
            font-size: medium;
        }

        .form-group label span {
            color: red;
        }

    .Button-mua button {
        font-size: x-large;
    }
   

</style>
<div class="checkout-body">
    <!-- Nút Back -->
    <div class="row mb-4">
        <div class="col-md-12">
            <button onclick="window.history.back();" class="btn btn-light">
                <i class="fas fa-arrow-left"></i> Quay lại
            </button>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="Card">
                <table class="table table-borderless bg-white">
                    <thead>
                        <tr class="text-center" style="font-size: medium;">
                            <th scope="col"><input type="checkbox" id="selectAll"></th>
                            <th scope="col">Tất cả </th>
                            <th scope="col">Đơn giá</th>
                       
                            <th scope="col">Đồ đính kèm</th>
                            
                            <th scope="col">Đơn giá</th>
                            <th scope="col">Thành tiền</th>
                            <th scope="col"><i class="fas fa-trash-alt delete-icon"></i></th>
                        </tr>
                    </thead>
                    <tbody>
                        @*  <tr class="text-center" style="font-size: medium;">
                        <td><input type="checkbox" checked></td>
                        <td class="ticket-info">
                        <span class="font-weight-bold d-block">V.League 2024/25</span>
                        <span class="d-block text-primary">Viettel FC vs Đông Á Thanh Hóa</span>
                        <span class="text-muted d-block">18:00 Chủ nhật, 10-11-2024</span>
                        <span class="d-block">KĐ A - Cửa 10 - Tầng 0</span>
                        </td>
                        <td>100.000 đ</td>
                        <td>1</td>
                        <td>100.000 đ</td>
                        <td><i class="fas fa-trash-alt delete-icon"></i></td>
                        </tr> *@
                    </tbody>
                </table>
            </div>
            <div class="info-customer bg-white">
                <h4>Thông tin thanh toán</h4>
                <input id="customerId" name="customerId" value="@customerId" hidden />
                @if (string.IsNullOrEmpty(customerId as string))
                {

                    <div class="row pt-4">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="fullName">Họ tên<span>*</span></label>
                                <input id="fullName" type="text" name="fullName" class="form-control" placeholder="Nhập họ tên" required />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="phone">Số điện thoại<span>*</span></label>
                                <input id="phone" type="tel" name="phone" class="form-control" placeholder="Nhập số điện thoại" required />
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="email">Email<span>*</span></label>
                        <input id="email" type="email" name="email" class="form-control" placeholder="Nhập Email" required />
                    </div>
                }
            </div>
            <div class="payment-method bg-white mt-4 p-3">
                <h4>Chọn hình thức thanh toán</h4>
                <div class="form-group pt-3">
                    <div class="bg-transparent outline-none border position-relative rounded d-flex align-items-center gap-3 px-3 py-1 w-100 fw-bold border-success my-3">
                        <img src="https://cdn.nextix.cloud/nextix/38/logo_vnpay_30fdda7b24.svg" alt="VNPAY Payment Method" loading="lazy" width="40" height="40" class="position-relative rounded-2" style="object-fit: scale-down; aspect-ratio: 1 / 1; width: 40px; height: 40px;">
                        VNPAY
                        <i class="bi bi-check-circle-fill position-absolute text-success fs-4" style="top: -10px; right: -6px;"></i>
                    </div>
                </div>
            </div>

        </div>
        <div class="col-md-4">
            <div class="don-hang bg-white p-3">
                <div class="don-hang-header">
                    <h4>Đơn hàng</h4>
                </div>
                <div class="don-hang-body">
                    <div class="body-content d-flex justify-content-between">
                        <p>Tổng tiền vé</p>
                        <p>0 đ</p>
                    </div>
                    <div class="body-content d-flex justify-content-between">
                        <p>Đồ đính kèm</p>
                        <p>0 đ</p>
                    </div>
                    <div class="body-content d-flex justify-content-between">
                        <p>Giảm giá</p>
                        <p>0 đ</p>
                    </div>
                </div>
                <div class="don-hang-footer">
                    <div class="body-content d-flex justify-content-between">
                        <p>Tổng tiền thanh toán</p>
                        <p class="total-amount">0 đ</p>
                    </div>
                </div>
                <p class="vat-note">(Đã bao gồm VAT nếu có)</p>

            </div>

            <div class="Button-mua pt-4">
                <button class="purchase-button">Đặt mua</button>
            </div>

            <!-- Order Note -->
            <p class="order-note">Xin quý khách vui lòng kiểm tra lại đơn hàng trước khi Đặt Mua.</p>

            <!-- Countdown Timer -->
            <div class="timer-container">
                <span>Giao dịch kết thúc sau</span>
                <span id="countdownMinutes" class="timer"></span> :
                <span id="countdownSeconds" class="timer"></span>
            </div>
        </div>

    </div>
</div>
<div id="popup" class="popup">
    <div class="popup-content">
        <i class="fa fa-check text-white" aria-hidden="true"></i>
        <p class="text-white">Thanh toán thành công</p>
    </div>
</div>
<script>
    document.addEventListener('click', function (e) {
        if (e.target && e.target.classList.contains('adjust-quantity')) {
            const index = e.target.getAttribute('data-index');
            const subIndex = e.target.getAttribute('data-subindex');
            const action = e.target.getAttribute('data-action');

            const cart = JSON.parse(localStorage.getItem('cart')) || [];
            const ticket = cart[index];
            const item = ticket.supplementaryItems[subIndex];

            if (action === 'increase') {
                // Kiểm tra xem số lượng có vượt quá 4 không
                if (item.itemQuantity < 4) {
                    item.itemQuantity++;
                }
            } else if (action === 'decrease' && item.itemQuantity > 1) {
                item.itemQuantity--;
            }

            // Cập nhật lại localStorage
            localStorage.setItem('cart', JSON.stringify(cart));

            // Cập nhật lại giao diện
            displayCart();
            updateTotal();
        }
    });

    document.addEventListener('DOMContentLoaded', function () {
        const selectAllCheckbox = document.getElementById('selectAll');
        const totalTicketElement = document.querySelector('.don-hang-body .body-content:nth-child(1) p:nth-child(2)');
        const totalSupplementaryElement = document.querySelector('.don-hang-body .body-content:nth-child(2) p:nth-child(2)');
        const totalAmountElement = document.querySelector('.don-hang-footer .body-content p.total-amount');
        const vatNoteElement = document.querySelector('.vat-note');
        let countdownInterval;

        // Hiển thị các mục giỏ hàng trong bảng
        displayCart();

        // Đếm ngược toàn cục
        startGlobalCountdown();

        // Thêm sự kiện cho "select all" checkbox
        selectAllCheckbox.addEventListener('change', function () {
            const isChecked = this.checked;
            document.querySelectorAll('.item-checkbox').forEach(checkbox => {
                checkbox.checked = isChecked;
            });
            updateTotal();
        });
    });

    function displayCart() {
        const cart = JSON.parse(localStorage.getItem('cart')) || [];
        const cartItemsContainer = document.querySelector('.table-borderless tbody');
        cartItemsContainer.innerHTML = '';

        cart.forEach((ticket, index) => {
            const { stands, floor, section, price, quantity, matchDetails, supplementaryItems } = ticket;
            const itemTotal = price * quantity;
            let supplementaryTotalPrice = 0;

            if (supplementaryItems && supplementaryItems.length > 0) {
                supplementaryItems.forEach(item => {
                    supplementaryTotalPrice += item.itemPrice * item.itemQuantity;
                });
            }

            const totalItemPrice = itemTotal + supplementaryTotalPrice;
            const supplementaryItemsString = supplementaryItems && supplementaryItems.length > 0
                ? supplementaryItems.map((item, subIndex) => `
                    <div class="row" style="display: flex; align-items: center; justify-content: center;">
                                <div class="col-md-4" style="flex-grow: 1; display: flex; justify-content: flex-end;padding:0;">
                            <img src="${item.itemImage}" alt="${item.itemName}" style="width: 30px; height: 30px; margin-right: 10px;" />
                            </div>
                                    <div class="col-md-4" style="max-width: 30%;">${item.itemName}</div>
                                        <div class="col-md-4" style="display: flex; justify-content: flex-start; align-items: center;">
                                <button class="adjust-quantity" data-index="${index}" data-subindex="${subIndex}" data-action="decrease">-</button>
                            <span class="item-quantity">${item.itemQuantity}</span>
                            <button class="adjust-quantity" data-index="${index}" data-subindex="${subIndex}" data-action="increase">+</button></div>
                        
                    </div><hr style="height:0">
                `).join('')
                : 'Không có';

            cartItemsContainer.innerHTML += `
                <tr class="text-center" style="font-size: medium;">
                    <td><input type="checkbox" class="item-checkbox" data-index="${index}" /></td>
                    <td>
                        <span class="font-weight-bold d-block">Viettel FC vs ${matchDetails.opponentName}</span>
                        <span class="d-block text-primary">${matchDetails.matchDate} - ${matchDetails.matchTime}</span>

                            <span class="text-muted d-block">Khán đài ${stands} ${(stands === "C" || stands === "D") ? '' : `- Tầng ${floor}`
                } - Cửa ${section}</span>
                    </td>
                    <td>${price.toLocaleString('vi-VN')} đ</td>
                    <td>${supplementaryItemsString}</td>
                    <td>${supplementaryTotalPrice.toLocaleString('vi-VN')} đ</td>
                    <td>${totalItemPrice.toLocaleString('vi-VN')} đ</td>
                    <td><i class="fas fa-trash-alt delete-icon" onclick="removeTicket(${index})"></i></td>
                </tr>
            `;
        });

        document.querySelectorAll('.item-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', updateTotal);
        });
    }

    function updateTotal() {
        const cart = JSON.parse(localStorage.getItem('cart')) || [];
        let totalTicketPrice = 0;
        let totalSupplementaryPrice = 0;

        document.querySelectorAll('.item-checkbox').forEach(checkbox => {
            if (checkbox.checked) {
                const index = parseInt(checkbox.getAttribute('data-index'));
                const ticket = cart[index];

                // Tính tiền vé
                const ticketPrice = ticket.price * ticket.quantity;
                totalTicketPrice += ticketPrice;

                // Tính tiền đồ đính kèm
                if (ticket.supplementaryItems && ticket.supplementaryItems.length > 0) {
                    ticket.supplementaryItems.forEach(item => {
                        totalSupplementaryPrice += item.itemPrice * item.itemQuantity;
                    });
                }
            }
        });

        const subtotal = totalTicketPrice + totalSupplementaryPrice;
        const vat = subtotal * 0.10; // 10% VAT
        const totalAmount = subtotal + vat;

        const totalTicketElement = document.querySelector('.don-hang-body .body-content:nth-child(1) p:nth-child(2)');
        const totalSupplementaryElement = document.querySelector('.don-hang-body .body-content:nth-child(2) p:nth-child(2)');
        const totalAmountElement = document.querySelector('.don-hang-footer .body-content p.total-amount');
        const vatNoteElement = document.querySelector('.vat-note');

        totalTicketElement.textContent = `${totalTicketPrice.toLocaleString('vi-VN')} đ`;
        totalSupplementaryElement.textContent = `${totalSupplementaryPrice.toLocaleString('vi-VN')} đ`;
        totalAmountElement.textContent = `${totalAmount.toLocaleString('vi-VN')} đ`;
        vatNoteElement.textContent = `(Đã bao gồm VAT ${vat.toLocaleString('vi-VN')} đ)`;
    }
    let countdownInterval;
    // Cập nhật hàm startGlobalCountdown để in ra thông báo và kiểm tra
    function startGlobalCountdown() {
        const cart = JSON.parse(localStorage.getItem('cart')) || [];
        const { nearestExpirationTime, nearestIndex } = getNearestExpirationTime(cart);

        if (nearestExpirationTime === null) {
            // Không có mục nào cần đếm ngược
            document.getElementById("countdownMinutes").textContent = "00";
            document.getElementById("countdownSeconds").textContent = "00";
            return;
        }

        // Nếu có countdownInterval trước đó, xóa đi
        if (countdownInterval) {
            clearInterval(countdownInterval);
        }

        countdownInterval = setInterval(() => {
            const now = new Date().getTime();
            const distance = nearestExpirationTime - now;

            if (distance < 0) {
                clearInterval(countdownInterval); // Hủy đếm ngược khi hết hạn
                removeTicket(nearestIndex); // Xóa mục đã hết hạn
                startGlobalCountdown(); // Lập lại đếm ngược cho mục tiếp theo
                return;
            }

            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((distance % (1000 * 60)) / 1000);

            document.getElementById("countdownMinutes").textContent = minutes.toString().padStart(2, '0');
            document.getElementById("countdownSeconds").textContent = seconds.toString().padStart(2, '0');
        }, 1000);
    }


    // Cập nhật hàm lấy thời gian hết hạn gần nhất
    function getNearestExpirationTime(cart) {
        const now = new Date().getTime();
        let nearestExpirationTime = null;
        let nearestIndex = -1;

        cart.forEach((ticket, index) => {
            console.log(`Ticket ${index} Expiration Time:`, ticket.expirationTime);
            if (ticket.expirationTime > now && (nearestExpirationTime === null || ticket.expirationTime < nearestExpirationTime)) {
                nearestExpirationTime = ticket.expirationTime;
                nearestIndex = index;
            }
        });

        return { nearestExpirationTime, nearestIndex };
    }




    let debounceTimeout;

    async function removeTicket(index) {
        const cart = JSON.parse(localStorage.getItem('cart')) || [];
        const removedItem = cart[index];

        if (removedItem) {
            // Clear the previous timeout if a new removal happens before the previous one finishes
            clearTimeout(debounceTimeout);

            debounceTimeout = setTimeout(async () => {
                // Call the API to decrease the ticket count
                try {
                    const response = await fetch(`https://localhost:5000/api/Area/decreasecount/${removedItem.matchId}/${removedItem.areaId}/${removedItem.quantity}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        // If the API call is successful, proceed to remove the ticket from the cart
                        cart.splice(index, 1);
                        localStorage.setItem('cart', JSON.stringify(cart));
                        displayCart(); // Update the cart display
                        updateTotal();  // Update the total price
                        startGlobalCountdown(); // Restart the global countdown
                    } else {
                        const errorData = await response.json();
                        alert(`Lỗi khi cập nhật số lượng vé: ${errorData.message || 'Không xác định'}`);
                    }
                } catch (error) {
                    console.error("Có lỗi xảy ra khi gọi API:", error);
                    alert("Không thể kết nối đến máy chủ. Vui lòng thử lại sau.");
                }
            }, 300); // Delay for 300 milliseconds before making the API call
        }
    }

</script>

<script>
    async function checkTicketLimits(checkedItems, email) {
        // Extract unique matchIds from checkedItems
        const matchIds = [...new Set(checkedItems.map(ticket => ticket.matchId))];
        const ticketLimit = 4; // Define ticket limit

        // Fetch ticket counts for each matchId concurrently
        const results = await Promise.all(
            matchIds.map(async (matchId) => {
             
                const apiUrl = `https://localhost:5000/api/TicketOrder/check-ticket-limit-customernoacc?matchId=${matchId}&email=${encodeURIComponent(email)}`;
                const response = await fetch(apiUrl);
                const result = await response.json();
                const count = result.totalTickets;

                // Count selected tickets for the current matchId
                const selectedTicketsCount = checkedItems.filter(ticket => ticket.matchId === matchId).length;
                const opponentName = checkedItems.find(ticket => ticket.matchId == matchId).matchDetails.opponentName;
                // Calculate total tickets
                const totalTickets = count + selectedTicketsCount;

                // Check if the limit is exceeded
                const isLimitReached = totalTickets > ticketLimit;

                return { matchId, totalTickets, isLimitReached,opponentName };
                
                  
    
            })
        );

        // Check results for any limit breaches
        const limitBreaches = results.filter(result => result.isLimitReached);

        if (limitBreaches.length > 0) {
            const opponentNames = limitBreaches.map(result => result.opponentName).join(', ');
            alert(`Bạn đã đặt đủ 4 vé cho trận đấu Viettetl FC vs ${opponentNames}. Vui lòng kiểm tra lại.`);
            
            return true;
        }

        else{
            return false;
        }
    }
    document.querySelector('.purchase-button').addEventListener('click', async () => {
        const cart = JSON.parse(localStorage.getItem('cart')) || [];
        if (cart.length === 0) {
            alert('Bạn không có vé để thanh toán');
            return;
        }
        else {
            // Filter only the checked items from the cart
            const checkedItems = cart.filter((_, index) => {
                return document.querySelectorAll('.item-checkbox')[index].checked;
            });

            if (checkedItems.length === 0) {
                alert('Vui lòng chọn ít nhất một vé để thanh toán.');
                return;
            }
            const customerId = document.getElementById('customerId') ? document.getElementById('customerId').value : null;
            const isGuest = !customerId;
            if (isGuest) {
                const notTrimmedFullName = document.getElementById('fullName').value;
                const fullName = document.getElementById('fullName').value.trim();
                const phone = document.getElementById('phone').value.trim();
                const email = document.getElementById('email').value.trim();
               
                // Biểu thức chính quy để kiểm tra email hợp lệ
                const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
                // Biểu thức chính quy để kiểm tra số điện thoại (chỉ số, độ dài từ 8-15)
                const phoneRegex = /^\d{8,15}$/;

                // Kiểm tra từng trường và hiển thị thông báo phù hợp
                if (!fullName) {
                    alert('Vui lòng nhập họ tên.');
                    return;
                }
                if(fullName!=notTrimmedFullName){
                    alert('Tên không được chứa dấu cách ở đầu và cuối');
                    return;
                }
                if (!phone) {
                    alert('Vui lòng nhập số điện thoại.');
                    return;
                }
                if (!phoneRegex.test(phone)) {
                    alert('Số điện thoại không đúng định dạng. Vui lòng chỉ nhập số (8-15 ký tự).');
                    return;
                }
                if (!email) {
                    alert('Vui lòng nhập email.');
                    return;
                }
                if (!emailRegex.test(email)) {
                    alert('Email không đúng định dạng. Vui lòng nhập email hợp lệ (ví dụ: example@gmail.com).');
                    return;
                }
                debugger;
                const checkLimit= await checkTicketLimits(checkedItems, email);
                if (checkLimit) return;

            }
            
            
            const totalAmountText = document.querySelector('.total-amount').textContent;
            const totalAmount = parseInt(totalAmountText.replace(/[^\d]/g, ''), 10);
            
            

            const requestData = {
                addCustomerDto: {
                    email: document.getElementById('email')?.value,
                    phone: document.getElementById('phone')?.value,
                    fullName: document.getElementById('fullName')?.value,
                    status: 0
                },
                orderDate: new Date().toISOString(),
                totalAmount,
                customerId: document.getElementById('customerId') ? parseInt(document.getElementById('customerId').value) : null,
                orderedTickets: checkedItems.map(ticket => ({
                    matchId: ticket.matchId,
                    areaId: ticket.areaId,
                    price: ticket.price,
                    status: 1,
                    orderId: 0
                })),
                orderedSuppItems: checkedItems.flatMap(ticket => ticket.supplementaryItems || []).map(item => ({
                    orderId: 0,
                    itemId: item.itemId,
                    quantity: item.itemQuantity,
                    price: item.itemPrice
                })),
                paymentDto: {
                    orderTicketId: 0,
                    orderProductId: null,
                    totalAmount,
                    paymentGateway: 'VNPAY',
                    status: 1
                }
            };

            try {
                const response = await fetch('/CheckoutTicket/SubmitTicketOrder', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestData)
                });

                const result = await response.json();
                if (result.success) {
                    // Redirect to the payment URL
                    localStorage.setItem('checkedItems', JSON.stringify(checkedItems));
                    window.location.href = result.paymentUrl;
                } else {
                    alert(result.message || 'Đặt vé không thành công. Vui lòng thử lại.');
                }
            } catch (error) {
                console.error('Lỗi khi gửi yêu cầu đặt vé:', error);
                alert('Đã xảy ra lỗi. Vui lòng thử lại.');
            }
        }

    });

</script>



<script src="~/admin_assets/js/jquery-3.6.0.min.js"></script>